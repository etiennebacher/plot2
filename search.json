[
  {
    "objectID": "NEWS.html",
    "href": "NEWS.html",
    "title": "News",
    "section": "",
    "text": "Website:\nWe now have a dedicated website! (#80 @vincentarelbundock)\nNew features:\n\nSupport for cex and bg (alias fill) arguments. The latter also permit the ‚Äúby‚Äù convenience keyword similar to lty and pch. This is useful for plotting filled point characters (e.g., pch = 21), where you want a different colour for the fill and border. (#50, #75 @grantmcdermott)\nSupport for filled density plots. (#58 @grantmcdermott)\nThe new add argument allows new plot2 objects to be added to / on top of the existing plot window. (#60 @grantmcdermott)\nSupport for one-sided formulas, e.g.¬†plot2(~ Temp | Month, airquality). (#62 @grantmcdermott and @zeileis)\nSupport for plot2(x, type = \"density\") as an alternative to plot2(density(x)). Works for both the atomic and one-sided formula methods. (#66 @grantmcdermott)\nSupport for ‚Äúarea‚Äù type plots as a special case of ribbon plots. (#68 @grantmcdermott)\nPartial matching for palette keywords. (#74 @grantmcdermott)\nplot2 gains a new facet argument for drawing faceted plots. Users can override the default square arrangement by passing the desired number of facet rows or columns to the companion facet.args helper function. Facets can be combined with by grouping, or used on their own. (#83, #91, #94, #96, #101, #103 @grantmcdermott)\nUsers can now control plot2-specific graphical parameters globally via the new par2() function (which is modeled on the base par() function). At the moment only a subset of global parameters, mostly related to legend and facet behaviour, are exposed in par2. But users can expect that more will be added in future releases. (#33, #94 @grantmcdermott)\n\nBug fixes:\n\nY-label correctly prints if a function was used for the atomic plot method, e.g.¬†plot2(rnorm(100). (#52 etiennebacher)\nRibbon plot types are now automatically ordered by the x variable. (#54 @grantmcdermott)\nInterval plots like ribbons, errorbars, and pointranges are now correctly plotted even if a y variable isn‚Äôt specified. (#54 @grantmcdermott)\nCorrectly label date-time axes. (#77 @grantmcdermott and @zeileis)\nImproved consistency of legend and facet margins across different plot types and placement, via the new lmar and fmar arguments of par2(). The default legend margin is par2(lmar = c(1,0, 0.1), which means that there is 1.0 line of padding between the legend and the plot region (inside margin) and 0.1 line of padding between the legend and edge of the graphics device (outer margin). Similarly, the default facet padding is par2(fmar = c(1,1,1,1), which means that there is a single line of padding around each side of the individual facets. Users can override these defaults by passing numeric vectors of the appropriate length to par2(). For example, par2(lmar = c(0,0.1) would shrink the inner gap between the legend and plot region to zero, but leave the small outer gap to outside of the graphics device unchanged. (#94 @grantmcdermott)\nFix bug where grid wasn‚Äôt auto-expanding correctly for area plots. (#92 @grantmcdermott)\n\n\n\n\nBreaking changes:\n\nColour palettes are now controlled via a single palette argument that unifies the old palette and (deprecated) palette.args arguments. In addition, the default palette for small groups has been changed from ‚ÄúOkabe-Ito‚Äù to ‚ÄúR4‚Äù. (#31 and #32 @grantmcdermott)\nLegends are now controlled via a single legend argument that unifies the previous (deprecated) legend.position and legend.args arguments. This change also enables several enhancements over the old legend behaviour; see below. (#34 @grantmcdermott)\n\nNew features:\n\nAdd support for the argument log. (#15 @etiennebacher)\nAdd support for grouped density plots. (#18 @grantmcdermott)\nAdd support for (both grouped and non-grouped) ‚Äúc‚Äù, ‚Äúh‚Äù, ‚Äús‚Äù, and ‚ÄúS‚Äù types. (#26 @grantmcdermott)\nBoth the pch and lty arguments now accept a ‚Äúby‚Äù convenience keyword for automatically adjusting plot characters and line types by groups. (#28 @grantmcdermott)\nAdd outside (‚Äú!‚Äù) placement support for remaining legend keywords, e.g. ‚Äútop!‚Äù, ‚Äúleft!‚Äù, ‚Äútopright!‚Äù, etc. Users also gain finer control over many other aspects of the legend via the new unified legend argument, including changing labels, turning of the legend title, and so on. (#34 @grantmcdermott)\nAdd support for \"pointrange\", \"errobar\", and \"ribbon\" plot types. (#35 @vincentarelbundock, #40 and #46 @grantmcdermott)\nSupport grid = TRUE as an alternative to grid = grid(). (#43 @grantmcdermott)\n\nBug fixes:\n\nSetting par(pch=X) globally is now respected. (#20 @grantmcdermott)\nFix x-axis scale/index when y is NULL. (#24 @grantmcdermott)\nSetting a global palette, e.g.¬†palette(\"ggplot2\") is now respected. (#44 @grantmcdermott)\n\n\n\n\nBreaking changes:\n\nLegend defaults have been changed. The default position is now ‚Äúright!‚Äù and drawn without a border, i.e.¬†bty = ‚Äún‚Äù (#14 by @grantmcdermott).\n\nNew features:\n\nAllow users to specify different pch, lty, and col types per group (#5 and #11 by @vincentarelbundock).\n\nBug fixes:\n\nAdding further elements to plot2 now works (#13 by @grantmcdermott, thanks @karoliskoncevicius for reporting).\n\nInternals:\n\nBetter formula parsing for plot2.formula (#8 by @zeileis).\nUnit testing scaffolding based on tinysnaphot (#11 by @vincent).\n\nProject:\n\n@vincentarelbundock and @zeileis have joined the project as core contributors. üéâ\n\n\n\n\n\nInitial release on GitHub.",
    "crumbs": [
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section",
    "href": "NEWS.html#section",
    "title": "News",
    "section": "",
    "text": "Website:\nWe now have a dedicated website! (#80 @vincentarelbundock)\nNew features:\n\nSupport for cex and bg (alias fill) arguments. The latter also permit the ‚Äúby‚Äù convenience keyword similar to lty and pch. This is useful for plotting filled point characters (e.g., pch = 21), where you want a different colour for the fill and border. (#50, #75 @grantmcdermott)\nSupport for filled density plots. (#58 @grantmcdermott)\nThe new add argument allows new plot2 objects to be added to / on top of the existing plot window. (#60 @grantmcdermott)\nSupport for one-sided formulas, e.g.¬†plot2(~ Temp | Month, airquality). (#62 @grantmcdermott and @zeileis)\nSupport for plot2(x, type = \"density\") as an alternative to plot2(density(x)). Works for both the atomic and one-sided formula methods. (#66 @grantmcdermott)\nSupport for ‚Äúarea‚Äù type plots as a special case of ribbon plots. (#68 @grantmcdermott)\nPartial matching for palette keywords. (#74 @grantmcdermott)\nplot2 gains a new facet argument for drawing faceted plots. Users can override the default square arrangement by passing the desired number of facet rows or columns to the companion facet.args helper function. Facets can be combined with by grouping, or used on their own. (#83, #91, #94, #96, #101, #103 @grantmcdermott)\nUsers can now control plot2-specific graphical parameters globally via the new par2() function (which is modeled on the base par() function). At the moment only a subset of global parameters, mostly related to legend and facet behaviour, are exposed in par2. But users can expect that more will be added in future releases. (#33, #94 @grantmcdermott)\n\nBug fixes:\n\nY-label correctly prints if a function was used for the atomic plot method, e.g.¬†plot2(rnorm(100). (#52 etiennebacher)\nRibbon plot types are now automatically ordered by the x variable. (#54 @grantmcdermott)\nInterval plots like ribbons, errorbars, and pointranges are now correctly plotted even if a y variable isn‚Äôt specified. (#54 @grantmcdermott)\nCorrectly label date-time axes. (#77 @grantmcdermott and @zeileis)\nImproved consistency of legend and facet margins across different plot types and placement, via the new lmar and fmar arguments of par2(). The default legend margin is par2(lmar = c(1,0, 0.1), which means that there is 1.0 line of padding between the legend and the plot region (inside margin) and 0.1 line of padding between the legend and edge of the graphics device (outer margin). Similarly, the default facet padding is par2(fmar = c(1,1,1,1), which means that there is a single line of padding around each side of the individual facets. Users can override these defaults by passing numeric vectors of the appropriate length to par2(). For example, par2(lmar = c(0,0.1) would shrink the inner gap between the legend and plot region to zero, but leave the small outer gap to outside of the graphics device unchanged. (#94 @grantmcdermott)\nFix bug where grid wasn‚Äôt auto-expanding correctly for area plots. (#92 @grantmcdermott)",
    "crumbs": [
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-1",
    "href": "NEWS.html#section-1",
    "title": "News",
    "section": "",
    "text": "Breaking changes:\n\nColour palettes are now controlled via a single palette argument that unifies the old palette and (deprecated) palette.args arguments. In addition, the default palette for small groups has been changed from ‚ÄúOkabe-Ito‚Äù to ‚ÄúR4‚Äù. (#31 and #32 @grantmcdermott)\nLegends are now controlled via a single legend argument that unifies the previous (deprecated) legend.position and legend.args arguments. This change also enables several enhancements over the old legend behaviour; see below. (#34 @grantmcdermott)\n\nNew features:\n\nAdd support for the argument log. (#15 @etiennebacher)\nAdd support for grouped density plots. (#18 @grantmcdermott)\nAdd support for (both grouped and non-grouped) ‚Äúc‚Äù, ‚Äúh‚Äù, ‚Äús‚Äù, and ‚ÄúS‚Äù types. (#26 @grantmcdermott)\nBoth the pch and lty arguments now accept a ‚Äúby‚Äù convenience keyword for automatically adjusting plot characters and line types by groups. (#28 @grantmcdermott)\nAdd outside (‚Äú!‚Äù) placement support for remaining legend keywords, e.g. ‚Äútop!‚Äù, ‚Äúleft!‚Äù, ‚Äútopright!‚Äù, etc. Users also gain finer control over many other aspects of the legend via the new unified legend argument, including changing labels, turning of the legend title, and so on. (#34 @grantmcdermott)\nAdd support for \"pointrange\", \"errobar\", and \"ribbon\" plot types. (#35 @vincentarelbundock, #40 and #46 @grantmcdermott)\nSupport grid = TRUE as an alternative to grid = grid(). (#43 @grantmcdermott)\n\nBug fixes:\n\nSetting par(pch=X) globally is now respected. (#20 @grantmcdermott)\nFix x-axis scale/index when y is NULL. (#24 @grantmcdermott)\nSetting a global palette, e.g.¬†palette(\"ggplot2\") is now respected. (#44 @grantmcdermott)",
    "crumbs": [
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-2",
    "href": "NEWS.html#section-2",
    "title": "News",
    "section": "",
    "text": "Breaking changes:\n\nLegend defaults have been changed. The default position is now ‚Äúright!‚Äù and drawn without a border, i.e.¬†bty = ‚Äún‚Äù (#14 by @grantmcdermott).\n\nNew features:\n\nAllow users to specify different pch, lty, and col types per group (#5 and #11 by @vincentarelbundock).\n\nBug fixes:\n\nAdding further elements to plot2 now works (#13 by @grantmcdermott, thanks @karoliskoncevicius for reporting).\n\nInternals:\n\nBetter formula parsing for plot2.formula (#8 by @zeileis).\nUnit testing scaffolding based on tinysnaphot (#11 by @vincent).\n\nProject:\n\n@vincentarelbundock and @zeileis have joined the project as core contributors. üéâ",
    "crumbs": [
      "News"
    ]
  },
  {
    "objectID": "NEWS.html#section-3",
    "href": "NEWS.html#section-3",
    "title": "News",
    "section": "",
    "text": "Initial release on GitHub.",
    "crumbs": [
      "News"
    ]
  },
  {
    "objectID": "vignettes/intro_tutorial.html",
    "href": "vignettes/intro_tutorial.html",
    "title": "Tutorial",
    "section": "",
    "text": "The goal of this intro tutorial is to give you a sense of the main features and syntax of plot2, a lightweight extension of the base R graphics system. We don‚Äôt try to cover everything, but you should come away with a good sense of how the package works and how it can integrate with your own projects.",
    "crumbs": [
      "Tutorial"
    ]
  },
  {
    "objectID": "vignettes/intro_tutorial.html#preliminaries",
    "href": "vignettes/intro_tutorial.html#preliminaries",
    "title": "Tutorial",
    "section": "Preliminaries",
    "text": "Preliminaries\nStart by loading the package. For this the examples in this tutorial, we‚Äôll be using a slightly modified version of the airquality dataset that comes bundled with base R. So we‚Äôll go ahead and create it now too.\n\nlibrary(plot2)\n\naq = airquality\naq$Month = factor(month.abb[aq$Month], levels = month.abb[5:9])",
    "crumbs": [
      "Tutorial"
    ]
  },
  {
    "objectID": "vignettes/intro_tutorial.html#similarity-to-plot",
    "href": "vignettes/intro_tutorial.html#similarity-to-plot",
    "title": "Tutorial",
    "section": "Similarity to plot()",
    "text": "Similarity to plot()\nAs far as possible, plot2 tries to be a drop-in replacement for regular plot calls.\n\npar(mfrow = c(1, 2))\n\nplot(0:10, main = \"plot\")\nplot2(0:10, main = \"plot2\")\n\n\n\n\n\n\n\n\npar(mfrow = c(1, 1)) # reset layout\n\nSimilarly, we can plot elements from a data frame using either the atomic or formula methods. Here‚Äôs a simple example using the aq dataset that we created earlier.\n\n# with(aq,  plot2(Day, Temp)) # atomic method (same as below)\nplot2(Temp ~ Day, data = aq)  # formula method",
    "crumbs": [
      "Tutorial"
    ]
  },
  {
    "objectID": "vignettes/intro_tutorial.html#grouped-data",
    "href": "vignettes/intro_tutorial.html#grouped-data",
    "title": "Tutorial",
    "section": "Grouped data",
    "text": "Grouped data\nWhere plot2 starts to diverge from its base counterpart is with respect to grouped data. In particular, plot2 allows you to characterize groups using the by argument.1\n\n# plot2(aq$Day, aq$Temp, by = aq$Month) # same as below\nwith(aq, plot2(Day, Temp, by = Month))\n\n\n\n\n\n\n\n\nAn arguably more convenient approach is to use the equivalent formula syntax. Just place the grouping variable after a vertical bar (i.e., |).\n\nplot2(Temp ~ Day | Month, data = aq)\n\n\n\n\n\n\n\n\nYou can use standard base plotting arguments to adjust features of your plot. For example, change pch (plot character) to get filled points.\n\nplot2(\n  Temp ~ Day | Month, data = aq,\n  pch = 16\n)\n\n\n\n\n\n\n\n\nSimilarly, converting to a grouped line plot is a simple matter of adjusting the type argument.\n\nplot2(\n  Temp ~ Day | Month, data = aq,\n  type = \"l\"\n)\n\n\n\n\n\n\n\n\nThe default behaviour of plot2 is to represent groups through colour. However, note that we can automatically adjust pch and lty by groups too by passing the \"by\" convenience keyword. This can be used in conjunction with the default group colouring. Or, as a replacement for group colouring‚Äîan option that may be particularly useful for contexts where colour is expensive or prohibited (e.g., certain academic journals).\n\nplot2(\n  Temp ~ Day | Month, data = aq,\n  type = \"l\",\n  col = \"black\", # override automatic group colours\n  lty = \"by\"     # change line type by group instead\n)",
    "crumbs": [
      "Tutorial"
    ]
  },
  {
    "objectID": "vignettes/intro_tutorial.html#colours",
    "href": "vignettes/intro_tutorial.html#colours",
    "title": "Tutorial",
    "section": "Colours",
    "text": "Colours\nOn the subject of group colours, these are easily customized via the palette argument. The default group colours are inherited from the user‚Äôs default palette. (Most likely the ‚ÄúR4‚Äù set of colors; see ?palette). However, all of the various palettes listed by palette.pals() and hcl.pals() are supported as convenience strings.2 Note that case-insensitive, partial matching for these convenience string is allowed. For example:\n\nplot2(\n  Temp ~ Day | Month, data = aq,\n  type = \"l\",\n  palette = \"tableau\" # or \"ggplot2\", \"okabe-ito\", \"set2\", \"harmonic\", etc.\n)\n\n\n\n\n\n\n\n\nBeyond these convenience strings, users can also supply a valid palette-generating function for finer control over transparency, colour order, and so forth. We‚Äôll see a demonstration of this further below.\nTo underscore what we said earlier, colours are inherited from the user‚Äôs default palette. So these can also be set globally, just as they can for the base plot function. The next code chunk will set a new default palette for the remainder of the plots that follow.\n\n# Set the default palette globally via the generic palette function\npalette(\"tableau\")",
    "crumbs": [
      "Tutorial"
    ]
  },
  {
    "objectID": "vignettes/intro_tutorial.html#legend",
    "href": "vignettes/intro_tutorial.html#legend",
    "title": "Tutorial",
    "section": "Legend",
    "text": "Legend\nIn all of the preceding plots, you will have noticed that we get an automatic legend. The legend position and look can be customized with the legend argument. At a minimum, you can pass the familiar legend position keywords as a convenience string (‚Äútopright‚Äù, ‚Äúbottom‚Äù, ‚Äúleft‚Äù, etc.). Moreover, a key feature of plot2 is that we can easily and elegantly place the legend outside the plot area by adding a trailing ‚Äú!‚Äù to these keywords. (As you may have realised, the default legend position is ‚Äúright!‚Äù.) Let‚Äôs demonstrate by moving the legend to the left of the plot:\n\nplot2(\n  Temp ~ Day | Month, data = aq,\n  type = \"l\",\n  legend = \"left!\"\n)\n\n\n\n\n\n\n\n\nBeyond the convenience of these positional keywords, the legend argument also permits additional customization by passing an appropriate function (or, a list of arguments that will be passed on to the standard legend() function internally.) So you can change or turn off the legend title, remove the bounding box, switch the direction of the legend text to horizontal, etc. Here‚Äôs a grouped density plot example, where we also add some shading by specifying that the background colour should vary by groups too.\n\nwith(\n  aq,\n  plot2(\n    density(Temp),\n    by = Month,\n    fill = \"by\",                         # add fill by groups\n    grid = TRUE,                         # add background grid\n    legend = list(\"topright\", bty = \"o\") # change legend features\n  )\n)",
    "crumbs": [
      "Tutorial"
    ]
  },
  {
    "objectID": "vignettes/intro_tutorial.html#interval-plots",
    "href": "vignettes/intro_tutorial.html#interval-plots",
    "title": "Tutorial",
    "section": "Interval plots",
    "text": "Interval plots\nplot2 adds supports for interval plots via the \"pointrange\", \"errorbar\", \"ribbon\" type arguments. An obvious use-case is for regression analysis and prediction.\n\nmod = lm(Temp ~ 0 + Month / Day, data = aq)\naq = cbind(aq, predict(mod, interval = \"confidence\"))\n\nwith(\n  aq,\n  plot2(\n    x = Day, y = fit,\n    ymin = lwr, ymax = upr,\n    by = Month,\n    type = \"ribbon\",\n    grid = TRUE,\n    main = \"Model predictions\"\n  )\n)\n\n\n\n\n\n\n\n\nSimilarly, we can grab the model estimates to produce nice coefficient plots.\n\ncoeftab = data.frame(\n  gsub(\"Month\", \"\", names(coef(mod))),\n  coef(mod),\n  confint(mod)\n) |&gt;\n  setNames(c(\"term\", \"estimate\", \"ci_low\", \"ci_high\"))\n\nwith(\n  subset(coeftab, !grepl(\"Day\", term)),\n  plot2(\n    x = term, y = estimate,\n    ymin = ci_low, ymax = ci_high,\n    type = \"pointrange\", # or: \"errobar\", \"ribbon\"\n    pch = 19, col = \"dodgerblue\",\n    grid = TRUE,\n    main = \"Average Monthly Effect on Temperature\"\n  )\n)",
    "crumbs": [
      "Tutorial"
    ]
  },
  {
    "objectID": "vignettes/intro_tutorial.html#facets",
    "href": "vignettes/intro_tutorial.html#facets",
    "title": "Tutorial",
    "section": "Facets",
    "text": "Facets\nAlongside the standard ‚Äúby‚Äù grouping approach that we have seen thus far, plot2 also supports faceted plots. Mirroring the main plot2 function, the facet argument accepts both atomic and formula methods.\n\nwith(\n  aq,\n  plot2(\n    x = Day, y = fit,\n    ymin = lwr, ymax = upr,\n    type = \"ribbon\",\n    facet = Month, ## &lt;- facet, not by\n    grid = TRUE,\n    main = \"Predicted air temperatures\"\n  )\n)\n\n\n\n\n\n\n\n\nBy default, facets will be arranged in a square configuration if more than three facets are detected. Users can override this behaviour by supplying nrow or ncol in the ‚Äúfacet.args‚Äù helper function. (The margin padding between individual facets can also be adjusted via the fmar argument.) Note that we can also reduce axis label redundancy by turning off the plot frame.\n\nwith(\n  aq,\n  plot2(\n    x = Day, y = fit,\n    ymin = lwr, ymax = upr,\n    type = \"ribbon\",\n    facet = Month,\n    facet.args = list(nrow = 1),\n    grid = TRUE, frame = FALSE,\n    main = \"Predicted air temperatures\"\n  )\n)\n\n\n\n\n\n\n\n\nHere‚Äôs a slightly fancier version where we combine facets with (by) colour grouping, add a background fill to the facet text, and also add back the original values to our model predictions. For this particular example, we‚Äôll use the facet = \"by\" convenience shorthand to facet along the same month variable as the colour grouping. But you can easily specify different by and facet variables if that‚Äôs what your data support.\n\n# Plot the original points \nwith(\n  aq,\n  plot2(\n    x = Day, y = Temp,\n    by = Month,\n    facet = \"by\", facet.args = list(bg = \"grey90\"),\n    palette = \"dark2\",\n    grid = TRUE, frame = FALSE, ylim = c(50, 100),\n    main = \"Actual and predicted air temperatures\"\n  )\n)\n# Add the model predictions to the same plot \nwith(\n  aq,\n  plot2(\n    x = Day, y = fit,\n    ymin = lwr, ymax = upr,\n    by = Month, facet = \"by\",\n    type = \"ribbon\",\n    palette = \"dark2\",\n    add = TRUE\n  )\n)\n\n\n\n\n\n\n\n\nAgain, the facet argument also accepts a formula interface. One particular use case is for two-sided formulas, which arranges the facet layout in a fixed grid arrangement. Here‚Äôs a simple (if contrived) example.\n\naq$hot = ifelse(aq$Temp&gt;=75, \"hot\", \"cold\")\naq$windy = ifelse(aq$Wind&gt;=15, \"windy\", \"calm\")\n\nplot2(\n Temp ~ Day, data = aq,\n facet = windy ~ hot,\n # the rest of these arguments are optional...\n facet.args = list(col = \"white\", bg = \"black\"),\n pch = 16, col = \"dodgerblue\",\n grid = TRUE, frame = FALSE, ylim = c(50, 100),\n main = \"Daily temperatures vs. wind\"\n)",
    "crumbs": [
      "Tutorial"
    ]
  },
  {
    "objectID": "vignettes/intro_tutorial.html#customization",
    "href": "vignettes/intro_tutorial.html#customization",
    "title": "Tutorial",
    "section": "Customization",
    "text": "Customization\nCustomizing your plots further is straightforward, whether that is done by changing global parameters (via par) or invoking plot2 arguments. Here‚Äôs a quick penultimate example, where we change our point character, tick labels, and font family globally, before adding some transparency to our colour palette, and use Tufte-style floating axes with a background panel grid.\n\npar(\n  pch    = 16,           # Filled points as default\n  las    = 1,            # Horizontal axis tick labels\n  family = \"HersheySans\" # Use a (built-in) Hershey font instead of Arial default\n)\n\nplot2(\n  Temp ~ Day | Month, data = aq,\n  type = \"b\",\n  palette = palette.colors(palette = \"tableau\", alpha = 0.5),\n  frame = FALSE, grid = TRUE,\n  main = \"Daily temperatures by month\"\n)\n\n\n\n\n\n\n\n\n(For access to a wider array of fonts, you might consider the showtext package (link).)\nAt the risk of repeating ourselves, the use of par in the previous example again underscores the correspondence with the base graphics system. Because plot2 is effectively a convenience wrapper around base plot, any global elements that you have set for the latter should carry over to the former. For nice out-of-the-box themes, we recommend the basetheme package (link).\n\npar(pch = 15, las = 0, family = \"\") # change/revert global changes from above\n\nlibrary(basetheme)\nbasetheme(\"royal\") # or \"clean\", \"dark\", \"ink\", \"brutal\", etc.\n\nplot2(\n  Temp ~ Day | Month, data = aq,\n  type = \"b\",\n  pch = \"by\",\n  palette = \"tropic\",\n  main = \"Daily temperatures by month\"\n)\n\n\n\n\n\n\n\n\nbasetheme(NULL)  # back to default theme\ndev.off()\n#&gt; null device \n#&gt;           1",
    "crumbs": [
      "Tutorial"
    ]
  },
  {
    "objectID": "vignettes/intro_tutorial.html#conclusion",
    "href": "vignettes/intro_tutorial.html#conclusion",
    "title": "Tutorial",
    "section": "Conclusion",
    "text": "Conclusion\nIn summary, consider the plot2 package if you are looking for base R plot functionality with some added convenience features. You can use pretty much the same syntax and all of your theme elements should carry over too. It has no dependencies other than base R itself and this makes it an attractive option for package developers or situations where dependency management is expensive (e.g., an R application running in a browser via WebAssembly).",
    "crumbs": [
      "Tutorial"
    ]
  },
  {
    "objectID": "vignettes/intro_tutorial.html#footnotes",
    "href": "vignettes/intro_tutorial.html#footnotes",
    "title": "Tutorial",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAt this point, experienced base plot users might protest that you can colour by groups using the col argument, e.g. with(aq, plot(Day, Temp, col = Month)). This is true, but there are several limitations. First, you don‚Äôt get an automatic legend. Second, the base plot.formula method doesn‚Äôt specify the grouping within the formula itself (not a deal-breaker, but not particularly consistent either). Third, and perhaps most importantly, this grouping doesn‚Äôt carry over to line plots (i.e., type=‚Äúl‚Äù). Instead, you have to transpose your data and use matplot. See this old StackOverflow thread for a longer discussion.‚Ü©Ô∏é\nSee the accompanying help pages of those two functions for more details on the available palettes, or read the article by Achim Zeileis and Paul Murrell.‚Ü©Ô∏é",
    "crumbs": [
      "Tutorial"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "plot2",
    "section": "",
    "text": "A lightweight extension of the base R graphics system, with support for automatic grouping, legends, facets and various other enhancements.\nplot2 is not yet on CRAN, but can be installed from R-universe.\ninstall.packages(\"plot2\", repos = \"https://grantmcdermott.r-universe.dev\")\nOur goal is to submit to CRAN within the first few months of 2024, once we have settled on some remaining design choices and features support. You can take a look at the open issues to see what‚Äôs currently under consideration. Please feel free to weigh on these if you have opinions. We want end users to have a say in determining the final product.\n\n\n\nR users are spoiled for choice when it comes to visualization frameworks. The options include ggplot2 (arguably the most important graphics system of the last decade) and lattice, not to mention a bewildering array of extensions built around, on top of, and in between these amazing packages.\nAs a result, it is perhaps not surprising that the base R graphics system sometimes gets short shrift. This is unfortunate, because base R offers very powerful and flexible plotting facilities. Just type demo(graphics) or demo(persp) into your R console to get an idea. Or, take a look at these two excellent tutorials. The downside of this power and flexibility is that base R plotting can require a fair bit of manual tinkering. A case in point is plotting grouped data with an appropriate legend. Doing so with the generic plot() function can require several function calls or a loop, fiddling with your plot regions, and then generating the legend manually.\nThe plot2 package aims to remove this overhead. It provides a lightweight (zero dependency) extension of the base R graphics system with various convenience features, particularly for representing groups with your data. For example, the core plot2() function makes it easy to plot different categories of a dataset in a single function call and highlight these categories (groups) using modern colour palettes. Coincident with this grouping support, plot2() also produces automatic legends with scope for further customization. While the package offers several other enhancements like facets, it tries as far as possible to be a drop-in replacement for the equivalent base plot function. Users should generally be able to swap a valid plot() call with plot2() without any changes to the expected output.\n\n\n\nThe plot2 website includes a detailed introductory tutorial, with numerous examples. But here are some quickstart examples of the package in action.\n\nlibrary(plot2)\n\nGrouped scatterplot with automatic legend:\n\n# with(iris, plot2(x = Petal.Length, y = Sepal.Length, by = Species)) # atomic\nplot2(Sepal.Length ~ Petal.Length | Species, data = iris)             # formula\n\n\n\n\n\n\n\n\nSame plot with a few extra aesthetic tweaks:\n\nplot2(\n  Sepal.Length ~ Petal.Length | Species, \n  data = iris,\n  palette = \"dark\", pch  = 16,\n  grid = TRUE, frame = FALSE\n)\n\n\n\n\n\n\n\n\nGrouped grouped density plot with automatic legend:\n\nplot2(\n  ~ Petal.Length | Species,\n  data = iris,\n  type = \"density\",\n  palette = \"dark\", fill = \"by\",\n  grid = TRUE,\n  main = \"Distribution of petal lengths by species\"\n)\n\n\n\n\n\n\n\n\nGrouped scatterplot, combined with facet layout:\n\niris2 = transform(iris, Sepals = ifelse(Sepal.Length&gt;6, \"Long\", \"Short\"))\nplot2(\n  Sepal.Length ~ Petal.Length | Sepals, data = iris2,\n  facet = ~Species,\n  facet.args = list(bg = \"grey90\"),\n  palette = \"classic\",\n  main = \"Faceted Sepals!\",\n  grid = TRUE, frame = FALSE\n)\n\n\n\n\n\n\n\n\nHead over to the intro tutorial for more examples, including range plots and customization.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#what",
    "href": "index.html#what",
    "title": "plot2",
    "section": "",
    "text": "A lightweight extension of the base R graphics system, with support for automatic grouping, legends, facets and various other enhancements.\nplot2 is not yet on CRAN, but can be installed from R-universe.\ninstall.packages(\"plot2\", repos = \"https://grantmcdermott.r-universe.dev\")\nOur goal is to submit to CRAN within the first few months of 2024, once we have settled on some remaining design choices and features support. You can take a look at the open issues to see what‚Äôs currently under consideration. Please feel free to weigh on these if you have opinions. We want end users to have a say in determining the final product.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#why",
    "href": "index.html#why",
    "title": "plot2",
    "section": "",
    "text": "R users are spoiled for choice when it comes to visualization frameworks. The options include ggplot2 (arguably the most important graphics system of the last decade) and lattice, not to mention a bewildering array of extensions built around, on top of, and in between these amazing packages.\nAs a result, it is perhaps not surprising that the base R graphics system sometimes gets short shrift. This is unfortunate, because base R offers very powerful and flexible plotting facilities. Just type demo(graphics) or demo(persp) into your R console to get an idea. Or, take a look at these two excellent tutorials. The downside of this power and flexibility is that base R plotting can require a fair bit of manual tinkering. A case in point is plotting grouped data with an appropriate legend. Doing so with the generic plot() function can require several function calls or a loop, fiddling with your plot regions, and then generating the legend manually.\nThe plot2 package aims to remove this overhead. It provides a lightweight (zero dependency) extension of the base R graphics system with various convenience features, particularly for representing groups with your data. For example, the core plot2() function makes it easy to plot different categories of a dataset in a single function call and highlight these categories (groups) using modern colour palettes. Coincident with this grouping support, plot2() also produces automatic legends with scope for further customization. While the package offers several other enhancements like facets, it tries as far as possible to be a drop-in replacement for the equivalent base plot function. Users should generally be able to swap a valid plot() call with plot2() without any changes to the expected output.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#quickstart",
    "href": "index.html#quickstart",
    "title": "plot2",
    "section": "",
    "text": "The plot2 website includes a detailed introductory tutorial, with numerous examples. But here are some quickstart examples of the package in action.\n\nlibrary(plot2)\n\nGrouped scatterplot with automatic legend:\n\n# with(iris, plot2(x = Petal.Length, y = Sepal.Length, by = Species)) # atomic\nplot2(Sepal.Length ~ Petal.Length | Species, data = iris)             # formula\n\n\n\n\n\n\n\n\nSame plot with a few extra aesthetic tweaks:\n\nplot2(\n  Sepal.Length ~ Petal.Length | Species, \n  data = iris,\n  palette = \"dark\", pch  = 16,\n  grid = TRUE, frame = FALSE\n)\n\n\n\n\n\n\n\n\nGrouped grouped density plot with automatic legend:\n\nplot2(\n  ~ Petal.Length | Species,\n  data = iris,\n  type = \"density\",\n  palette = \"dark\", fill = \"by\",\n  grid = TRUE,\n  main = \"Distribution of petal lengths by species\"\n)\n\n\n\n\n\n\n\n\nGrouped scatterplot, combined with facet layout:\n\niris2 = transform(iris, Sepals = ifelse(Sepal.Length&gt;6, \"Long\", \"Short\"))\nplot2(\n  Sepal.Length ~ Petal.Length | Sepals, data = iris2,\n  facet = ~Species,\n  facet.args = list(bg = \"grey90\"),\n  palette = \"classic\",\n  main = \"Faceted Sepals!\",\n  grid = TRUE, frame = FALSE\n)\n\n\n\n\n\n\n\n\nHead over to the intro tutorial for more examples, including range plots and customization.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "man/draw_legend.html",
    "href": "man/draw_legend.html",
    "title": "plot2",
    "section": "",
    "text": "Internal function used to calculate the placement of (including outside the plotting area) and drawing of legend.\n\n\n\ndraw_legend(\n  legend = NULL,\n  legend.args = NULL,\n  by_dep = NULL,\n  lgnd_labs = NULL,\n  type = NULL,\n  pch = NULL,\n  lty = NULL,\n  col = NULL,\n  bg = NULL,\n  cex = NULL,\n  lmar = NULL,\n  has_sub = FALSE,\n  new_plot = TRUE\n)\n\n\n\n\n\n\n\nlegend\n\n\nLegend placement keyword or list, passed down from plot2.\n\n\n\n\nlegend.args\n\n\nAdditional legend arguments to be passed to legend().\n\n\n\n\nby_dep\n\n\nThe (deparsed) \"by\" grouping variable name.\n\n\n\n\nlgnd_labs\n\n\nThe labels passed to legend(legend = ‚Ä¶).\n\n\n\n\ntype\n\n\nPlotting type(s), passed down from plot2.\n\n\n\n\npch\n\n\nPlotting character(s), passed down from plot2.\n\n\n\n\nlty\n\n\nPlotting linetype(s), passed down from plot2.\n\n\n\n\ncol\n\n\nPlotting colour(s), passed down from plot2.\n\n\n\n\nbg\n\n\nPlotting character background fill colour(s), passed down from plot2.\n\n\n\n\ncex\n\n\nPlotting character expansion(s), passed down from plot2.\n\n\n\n\nlmar\n\n\nLegend margins (in lines). Should be a numeric vector of the form c(inner, outer), where the first number represents the \"inner\" margin between the legend and the plot, and the second number represents the \"outer\" margin between the legend and edge of the graphics device. If no explicit value is provided by the user, then reverts back to par2(‚Äúlmar‚Äù) for which the default values are c(1.0, 0.1).\n\n\n\n\nhas_sub\n\n\nLogical. Does the plot have a sub-caption. Only used if keyword position is \"bottom!\", in which case we need to bump the legend margin a bit further.\n\n\n\n\nnew_plot\n\n\nShould we be calling plot.new internally?\n\n\n\n\n\n\n\nlibrary(plot2)\n\n\noldmar = par(\"mar\")\n\ndraw_legend(\n  legend = \"right!\", ## default (other options incl, \"left(!)\", \"\"bottom(!)\", etc.)\n  legend.args = list(title = \"Key\", bty = \"o\"),\n  lgnd_labs = c(\"foo\", \"bar\"),\n  type = \"p\",\n  pch = 21:22,\n  col = 1:2\n)\n\n# The legend is placed in the outer margin...\nbox(\"figure\", col = \"cyan\", lty = 4)\n# ... and the plot is proportionally adjusted against the edge of this\n# margin.\nbox(\"plot\")\n# You can add regular plot objects per normal now\nplot.window(xlim = c(1,10), ylim = c(1,10))\npoints(1:10)\npoints(10:1, pch = 22, col = \"red\")\naxis(1); axis(2)\n\n\n\n\n\n\n\n# etc.\n\n# Important: A side effect of draw_legend is that the inner margins have been\n# adjusted. (Here: The right margin, since we called \"right!\" above.)\npar(\"mar\")\n\n[1] 5.1 4.1 4.1 0.0\n\n# To reset you should call `dev.off()` or just reset manually.\npar(mar = oldmar)\n\n# Note that the inner and outer margin of the legend itself can be set via\n# the `lmar` argument. (This can also be set globally via\n# `par2(lmar = c(inner, outer))`.)\ndraw_legend(\n  legend.args = list(title = \"Key\", bty = \"o\"),\n  lgnd_labs = c(\"foo\", \"bar\"),\n  type = \"p\",\n  pch = 21:22,\n  col = 1:2,\n  lmar = c(0, 0.1) ## set inner margin to zero\n)\nbox(\"figure\", col = \"cyan\", lty = 4)\n\n\n\n\n\n\n\npar(mar = oldmar)",
    "crumbs": [
      "Reference",
      "draw_legend"
    ]
  },
  {
    "objectID": "man/draw_legend.html#calculate-placement-of-legend-and-and-draw-it",
    "href": "man/draw_legend.html#calculate-placement-of-legend-and-and-draw-it",
    "title": "plot2",
    "section": "",
    "text": "Internal function used to calculate the placement of (including outside the plotting area) and drawing of legend.\n\n\n\ndraw_legend(\n  legend = NULL,\n  legend.args = NULL,\n  by_dep = NULL,\n  lgnd_labs = NULL,\n  type = NULL,\n  pch = NULL,\n  lty = NULL,\n  col = NULL,\n  bg = NULL,\n  cex = NULL,\n  lmar = NULL,\n  has_sub = FALSE,\n  new_plot = TRUE\n)\n\n\n\n\n\n\n\nlegend\n\n\nLegend placement keyword or list, passed down from plot2.\n\n\n\n\nlegend.args\n\n\nAdditional legend arguments to be passed to legend().\n\n\n\n\nby_dep\n\n\nThe (deparsed) \"by\" grouping variable name.\n\n\n\n\nlgnd_labs\n\n\nThe labels passed to legend(legend = ‚Ä¶).\n\n\n\n\ntype\n\n\nPlotting type(s), passed down from plot2.\n\n\n\n\npch\n\n\nPlotting character(s), passed down from plot2.\n\n\n\n\nlty\n\n\nPlotting linetype(s), passed down from plot2.\n\n\n\n\ncol\n\n\nPlotting colour(s), passed down from plot2.\n\n\n\n\nbg\n\n\nPlotting character background fill colour(s), passed down from plot2.\n\n\n\n\ncex\n\n\nPlotting character expansion(s), passed down from plot2.\n\n\n\n\nlmar\n\n\nLegend margins (in lines). Should be a numeric vector of the form c(inner, outer), where the first number represents the \"inner\" margin between the legend and the plot, and the second number represents the \"outer\" margin between the legend and edge of the graphics device. If no explicit value is provided by the user, then reverts back to par2(‚Äúlmar‚Äù) for which the default values are c(1.0, 0.1).\n\n\n\n\nhas_sub\n\n\nLogical. Does the plot have a sub-caption. Only used if keyword position is \"bottom!\", in which case we need to bump the legend margin a bit further.\n\n\n\n\nnew_plot\n\n\nShould we be calling plot.new internally?\n\n\n\n\n\n\n\nlibrary(plot2)\n\n\noldmar = par(\"mar\")\n\ndraw_legend(\n  legend = \"right!\", ## default (other options incl, \"left(!)\", \"\"bottom(!)\", etc.)\n  legend.args = list(title = \"Key\", bty = \"o\"),\n  lgnd_labs = c(\"foo\", \"bar\"),\n  type = \"p\",\n  pch = 21:22,\n  col = 1:2\n)\n\n# The legend is placed in the outer margin...\nbox(\"figure\", col = \"cyan\", lty = 4)\n# ... and the plot is proportionally adjusted against the edge of this\n# margin.\nbox(\"plot\")\n# You can add regular plot objects per normal now\nplot.window(xlim = c(1,10), ylim = c(1,10))\npoints(1:10)\npoints(10:1, pch = 22, col = \"red\")\naxis(1); axis(2)\n\n\n\n\n\n\n\n# etc.\n\n# Important: A side effect of draw_legend is that the inner margins have been\n# adjusted. (Here: The right margin, since we called \"right!\" above.)\npar(\"mar\")\n\n[1] 5.1 4.1 4.1 0.0\n\n# To reset you should call `dev.off()` or just reset manually.\npar(mar = oldmar)\n\n# Note that the inner and outer margin of the legend itself can be set via\n# the `lmar` argument. (This can also be set globally via\n# `par2(lmar = c(inner, outer))`.)\ndraw_legend(\n  legend.args = list(title = \"Key\", bty = \"o\"),\n  lgnd_labs = c(\"foo\", \"bar\"),\n  type = \"p\",\n  pch = 21:22,\n  col = 1:2,\n  lmar = c(0, 0.1) ## set inner margin to zero\n)\nbox(\"figure\", col = \"cyan\", lty = 4)\n\n\n\n\n\n\n\npar(mar = oldmar)",
    "crumbs": [
      "Reference",
      "draw_legend"
    ]
  },
  {
    "objectID": "man/par2.html",
    "href": "man/par2.html",
    "title": "plot2",
    "section": "",
    "text": "par2 can be used to set or query the additional set of graphical parameters provided by plot2 (i.e., beyond the base set provided by par). Similar to its base counterpart, parameters can be set by passing the appropriate tag-value argument pairs to par2. Multiple parameters can be set or queried at the same time, as a list.\n\n\n\npar2(...)\n\n\n\n\n\n\n\n‚Ä¶\n\n\narguments of the form tag = value. Supported plot2 parameters are described in the ‚ÄòGraphical Parameters‚Äô section below.\n\n\n\n\n\n\n\n\n\nfacet.cex\n\n\n\n\nExpansion factor for facet titles. Defaults to 1.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfacet.font\n\n\n\n\nAn integer corresponding to the desired font face for facet titles. For most font families and graphics devices, one of four possible values: 1 (regular), 2 (bold), 3 (italic), or 4 (bold italic). Defaults to NULL, which is equivalent to 1 (i.e., regular).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfacet.col\n\n\n\n\nCharacter or integer specifying the facet text colour. If an integer, will correspond to the user‚Äôs default global colour palette (see palette). Defaults to NULL, which is equivalent to ‚Äúblack‚Äù.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfacet.bg\n\n\n\n\nCharacter or integer specifying the facet background colour. If an integer, will correspond to the user‚Äôs default colour palette (see palette). Passed rect. Defaults to NULL (none).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfacet.border\n\n\n\n\nCharacter or integer specifying the facet border colour. If an integer, will correspond to the users default colour palette (see palette). Passed rect. Defaults to NA (none).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfmar\n\n\n\n\nA numeric vector of form c(b,l,t,r) for controlling the (base) margin padding, in terms of lines, between the individual facets in a faceted plot. Defaults to c(1,1,1,1), i.e.¬†a single line of padding around each facet. If more that three facets are detected, the fmar parameter is scaled by 0.75 (i.e., three-quarters) to reduce the excess whitespace that would otherwise arise due to the absent axes lines and labels. (An exception is made for 2x2 plots to better match the cex expansion logic of the base graphics system under this particular layout.) Similarly, note that an extra 0.5 lines is subtracted from each side of the facet padding for plots that aren‚Äôt framed, to reduce excess whitespace.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlast_facet_par\n\n\n\n\nFull list of graphical parameters used to constructed the most recent faceted plot2 plot during the current session. Unlike other par2 parameters, this parameter is intended for internal use (specifically, to enable adding further elements on top of an existing faceted plot) and should not be set by the user.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlmar\n\n\n\n\nA numeric vector of form c(inner, outer) that gives the margin padding, in terms of lines, around the automatic plot2 legend. Defaults to c(1.0, 0.1), where the first number represents the ‚Äúinner‚Äù margin between the legend and the plot region, and the second number represents the ‚Äúouter‚Äù margin between the legend and edge of the graphics device. (Note that an exception for the definition of the ‚Äúouter‚Äù legend margin occurs when the legend placement is ‚Äútop!‚Äù, since the legend is placed above the plot region but below the main title. In such cases, the outer margin is relative to the existing gap between the title and the plot region, which is itself determined by par(‚Äúmar‚Äù)[3].)",
    "crumbs": [
      "Reference",
      "par2"
    ]
  },
  {
    "objectID": "man/par2.html#set-or-query-plot2-parameters",
    "href": "man/par2.html#set-or-query-plot2-parameters",
    "title": "plot2",
    "section": "",
    "text": "par2 can be used to set or query the additional set of graphical parameters provided by plot2 (i.e., beyond the base set provided by par). Similar to its base counterpart, parameters can be set by passing the appropriate tag-value argument pairs to par2. Multiple parameters can be set or queried at the same time, as a list.\n\n\n\npar2(...)\n\n\n\n\n\n\n\n‚Ä¶\n\n\narguments of the form tag = value. Supported plot2 parameters are described in the ‚ÄòGraphical Parameters‚Äô section below.\n\n\n\n\n\n\n\n\n\nfacet.cex\n\n\n\n\nExpansion factor for facet titles. Defaults to 1.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfacet.font\n\n\n\n\nAn integer corresponding to the desired font face for facet titles. For most font families and graphics devices, one of four possible values: 1 (regular), 2 (bold), 3 (italic), or 4 (bold italic). Defaults to NULL, which is equivalent to 1 (i.e., regular).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfacet.col\n\n\n\n\nCharacter or integer specifying the facet text colour. If an integer, will correspond to the user‚Äôs default global colour palette (see palette). Defaults to NULL, which is equivalent to ‚Äúblack‚Äù.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfacet.bg\n\n\n\n\nCharacter or integer specifying the facet background colour. If an integer, will correspond to the user‚Äôs default colour palette (see palette). Passed rect. Defaults to NULL (none).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfacet.border\n\n\n\n\nCharacter or integer specifying the facet border colour. If an integer, will correspond to the users default colour palette (see palette). Passed rect. Defaults to NA (none).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfmar\n\n\n\n\nA numeric vector of form c(b,l,t,r) for controlling the (base) margin padding, in terms of lines, between the individual facets in a faceted plot. Defaults to c(1,1,1,1), i.e.¬†a single line of padding around each facet. If more that three facets are detected, the fmar parameter is scaled by 0.75 (i.e., three-quarters) to reduce the excess whitespace that would otherwise arise due to the absent axes lines and labels. (An exception is made for 2x2 plots to better match the cex expansion logic of the base graphics system under this particular layout.) Similarly, note that an extra 0.5 lines is subtracted from each side of the facet padding for plots that aren‚Äôt framed, to reduce excess whitespace.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlast_facet_par\n\n\n\n\nFull list of graphical parameters used to constructed the most recent faceted plot2 plot during the current session. Unlike other par2 parameters, this parameter is intended for internal use (specifically, to enable adding further elements on top of an existing faceted plot) and should not be set by the user.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlmar\n\n\n\n\nA numeric vector of form c(inner, outer) that gives the margin padding, in terms of lines, around the automatic plot2 legend. Defaults to c(1.0, 0.1), where the first number represents the ‚Äúinner‚Äù margin between the legend and the plot region, and the second number represents the ‚Äúouter‚Äù margin between the legend and edge of the graphics device. (Note that an exception for the definition of the ‚Äúouter‚Äù legend margin occurs when the legend placement is ‚Äútop!‚Äù, since the legend is placed above the plot region but below the main title. In such cases, the outer margin is relative to the existing gap between the title and the plot region, which is itself determined by par(‚Äúmar‚Äù)[3].)",
    "crumbs": [
      "Reference",
      "par2"
    ]
  },
  {
    "objectID": "man/plot2.html",
    "href": "man/plot2.html",
    "title": "plot2",
    "section": "",
    "text": "Extends base R‚Äôs graphics system, particularly as it applies to scatter and line plots with grouped data. For example, plot2 makes it easy to plot different categories of a dataset in a single function call and highlight these categories (groups) using modern colour palettes. Coincident with this grouping support, plot2 also produces automatic legends with scope for further customization. While the package also offers several other enhancements, it tries as far as possible to be a drop-in replacement for the equivalent base plot function. Users should generally be able to swap a valid plot call with plot2 without any changes to the output.\n\n\n\nplot2(x, ...)\n\n## Default S3 method:\nplot2(\n  x,\n  y = NULL,\n  by = NULL,\n  facet = NULL,\n  facet.args = NULL,\n  data = NULL,\n  type = \"p\",\n  xlim = NULL,\n  ylim = NULL,\n  log = \"\",\n  main = NULL,\n  sub = NULL,\n  xlab = NULL,\n  ylab = NULL,\n  ann = par(\"ann\"),\n  axes = TRUE,\n  frame.plot = axes,\n  asp = NA,\n  grid = NULL,\n  palette = NULL,\n  legend = NULL,\n  pch = NULL,\n  lty = NULL,\n  col = NULL,\n  bg = NULL,\n  fill = NULL,\n  cex = 1,\n  par_restore = FALSE,\n  ymin = NULL,\n  ymax = NULL,\n  ribbon_alpha = 0.2,\n  add = FALSE,\n  ...\n)\n\n## S3 method for class 'formula'\nplot2(\n  x = NULL,\n  data = parent.frame(),\n  facet = NULL,\n  facet.args = NULL,\n  type = \"p\",\n  xlim = NULL,\n  ylim = NULL,\n  main = NULL,\n  sub = NULL,\n  xlab = NULL,\n  ylab = NULL,\n  ann = par(\"ann\"),\n  axes = TRUE,\n  frame.plot = axes,\n  asp = NA,\n  grid = NULL,\n  pch = NULL,\n  col = NULL,\n  lty = NULL,\n  par_restore = FALSE,\n  formula = NULL,\n  subset = NULL,\n  na.action = NULL,\n  drop.unused.levels = TRUE,\n  ...\n)\n\n## S3 method for class 'density'\nplot2(\n  x = NULL,\n  by = NULL,\n  facet = NULL,\n  facet.args = NULL,\n  type = c(\"l\", \"area\"),\n  xlim = NULL,\n  ylim = NULL,\n  main = NULL,\n  sub = NULL,\n  xlab = NULL,\n  ylab = NULL,\n  ann = par(\"ann\"),\n  axes = TRUE,\n  frame.plot = axes,\n  asp = NA,\n  grid = NULL,\n  pch = NULL,\n  col = NULL,\n  lty = NULL,\n  bg = NULL,\n  fill = NULL,\n  par_restore = FALSE,\n  ...\n)\n\n\n\n\n\n\n\nx, y\n\n\nthe x and y arguments provide the x and y coordinates for the plot. Any reasonable way of defining the coordinates is acceptable; most likely the names of existing vectors or columns of data frames. See the ‚ÄòExamples‚Äô section below, or the function xy.coords for details. If supplied separately, x and y must be of the same length.\n\n\n\n\n‚Ä¶\n\n\nother graphical parameters. See par or the \"Details\" section of plot.\n\n\n\n\nby\n\n\ngrouping variable(s). By default, groups will be represented through colouring of the plot elements. However, this can be turned off and other plot parameters (e.g., line types) can also take on grouping behaviour via the special \"by\" keyword. See Examples.\n\n\n\n\nfacet\n\n\nthe faceting variable(s) that you want arrange separate plot windows by. Can be specified in various ways:\n\n\nIn \"atomic\" form, e.g.¬†facet = fvar. To facet by multiple variables in atomic form, simply interact them, e.g. interaction(fvar1, fvar2) or factor(fvar1):factor(fvar2).\n\n\nAs a one-sided formula, e.g.¬†facet = ~fvar. Multiple variables can be specified in the formula RHS, e.g.¬†~fvar1 + fvar2 or ~fvar1:fvar2. Note that these multi-variable cases are all treated equivalently and converted to interaction(fvar1, fvar2, ‚Ä¶) internally. (No distinction is made between different types of binary operators, for example, and so f1+f2 is treated the same as f1:f2, is treated the same as f1*f2, etc.)\n\n\nAs a two-side formula, e.g.¬†facet = fvar1 ~ fvar2. In this case, the facet windows are arranged in a fixed grid layout, with the formula LHS defining the facet rows and the RHS defining the facet columns. At present only single variables on each side of the formula are well supported. (We don‚Äôt recommend trying to use multiple variables on either the LHS or RHS of the two-sided formula case.)\n\n\nAs a special ‚Äúby‚Äù convenience keyword, in which case facets will match the grouping variable(s) passed to by above.\n\n\n\n\n\n\nfacet.args\n\n\nan optional list of arguments for controlling faceting behaviour. (Ignored if facet is NULL.) Supported arguments are as follows:\n\n\nnrow, ncol for overriding the default \"square\" facet window arrangement. Only one of these should be specified, but nrow will take precedence if both are specified together. Ignored if a two-sided formula is passed to the main facet argument, since the layout is arranged in a fixed grid.\n\n\nfmar a vector of form c(b,l,t,r) for controlling the base margin between facets in terms of lines. Defaults to the value of par2(‚Äúfmar‚Äù), which should be c(1,1,1,1), i.e.¬†a single line of padding around each individual facet, assuming it hasn‚Äôt been overridden by the user as part their global par2 settings. Note some automatic adjustments are made for certain layouts, and depending on whether the plot is framed or not, to reduce excess whitespace. See par2 for more details.\n\n\ncex, font, col, bg, border for adjusting the facet title text and background. Default values for these arguments are inherited from par2 (where they take a \"facet.\" prefix, e.g. par2(‚Äúfacet.cex‚Äù)). The latter function can also be used to set these features globally for all plot2 plots.\n\n\n\n\n\n\ndata\n\n\na data.frame (or list) from which the variables in formula should be taken. A matrix is converted to a data frame.\n\n\n\n\ntype\n\n\ncharacter string giving the type of plot desired. Options are:\n\n\nThe same set of 1-character values supported by plot: \"p\" for points, \"l\" for lines, \"b\" for both points and lines, \"c\" for empty points joined by lines, \"o\" for overplotted points and lines, \"s\" and \"S\" for stair steps and \"h\" for histogram-like vertical lines. \"n\" does not produce any points or lines.\n\n\nAdditional plot2 types: \"density\" for densities, \"pointrange\" or \"errorbar\" for segement intervals, and \"ribbon\" or \"area\" for polygon intervals (where area plots are a special case of ribbon plots with ymin set to 0 and ymax set to y; see below).\n\n\n\n\n\n\nxlim\n\n\nthe x limits (x1, x2) of the plot. Note that x1 &gt; x2 is allowed and leads to a ‚Äòreversed axis‚Äô. The default value, NULL, indicates that the range of the finite values to be plotted should be used.\n\n\n\n\nylim\n\n\nthe y limits of the plot.\n\n\n\n\nlog\n\n\na character string which contains \"x\" if the x axis is to be logarithmic, \"y\" if the y axis is to be logarithmic and \"xy\" or \"yx\" if both axes are to be logarithmic.\n\n\n\n\nmain\n\n\na main title for the plot, see also title.\n\n\n\n\nsub\n\n\na subtitle for the plot.\n\n\n\n\nxlab\n\n\na label for the x axis, defaults to a description of x.\n\n\n\n\nylab\n\n\na label for the y axis, defaults to a description of y.\n\n\n\n\nann\n\n\na logical value indicating whether the default annotation (title and x and y axis labels) should appear on the plot.\n\n\n\n\naxes\n\n\na logical value indicating whether both axes should be drawn on the plot. Use graphical parameter \"xaxt\" or \"yaxt\" to suppress just one of the axes.\n\n\n\n\nframe.plot\n\n\na logical indicating whether a box should be drawn around the plot. Can also use frame as an acceptable argument alias.\n\n\n\n\nasp\n\n\nthe y/xy/x aspect ratio, see plot.window.\n\n\n\n\ngrid\n\n\nargument for plotting a background panel grid, one of either:\n\n\na logical (i.e., TRUE to draw the grid), or\n\n\na panel grid plotting function like grid(). Note that this argument replaces the panel.first and panel.last arguments from base plot() and tries to make the process more seamless with better default behaviour. Default is not to draw a grid.\n\n\n\n\n\n\npalette\n\n\none of the following options:\n\n\nNULL (default), in which case the palette will be determined by the the user‚Äôs default graphics palette, e.g.¬†\"R4\". See ?palette(). Note that some internal checking is done to make sure that resulting colours match the number of groups. For larger group numbers, the \"viridis\" palette will be used instead.\n\n\nA convenience string corresponding to one of the many palettes listed by either palette.pals() or hcl.pals(). Note that the string can be case-insensitive (e.g., \"Okabe-Ito\" and \"okabe-ito\" are both valid).\n\n\nA palette-generating function. This can be \"bare\" (e.g., palette.colors) or \"closed\" with a set of named arguments (e.g., palette.colors(palette = ‚ÄúOkabe-Ito‚Äù, alpha = 0.5)). Note that any unnamed arguments will be ignored and the key n argument, denoting the number of colours, will automatically be spliced in as the number of groups.\n\n\n\n\n\n\nlegend\n\n\none of the following options:\n\n\nNULL (default), in which case the legend will be determined by the grouping variable. If there is no group variable (i.e., by is NULL) then no legend is drawn. If a grouping variable is detected, then an automatic legend is drawn to the outer right of the plotting area. Note that the legend title and categories will automatically be inferred from the by argument and underlying data.\n\n\nA convenience string indicating the legend position. The string should correspond to one of the position keywords supported by the base legend function, e.g.¬†\"right\", \"topleft\", \"bottom\", etc. In addition, plot2 supports adding a trailing exclamation point to these keywords, e.g. \"right!\", \"topleft!\", or \"bottom!\". This will place the legend outside the plotting area and adjust the margins of the plot accordingly. Finally, users can also turn off any legend printing by specifying \"none\".\n\n\nLogical value, where TRUE corresponds to the default case above (same effect as specifying NULL) and FALSE turns the legend off (same effect as specifying \"none\").\n\n\nA list or, equivalently, a dedicated legend() function with supported legend arguments, e.g.¬†\"bty\", \"horiz\", and so forth.\n\n\n\n\n\n\npch\n\n\nplotting \"character\", i.e., symbol to use. Character, integer, or vector of length equal to the number of categories in the by variable. See pch. In addition, users can supply a special pch = ‚Äúby‚Äù convenience argument, in which case the characters will automatically loop over the number groups. This automatic looping will begin at the global character value (i.e., par(‚Äúpch‚Äù)) and recycle as necessary.\n\n\n\n\nlty\n\n\nline type. Character, integer, or vector of length equal to the number of categories in the by variable. See lty. In addition, users can supply a special lty = ‚Äúby‚Äù convenience argument, in which case the line type will automatically loop over the number groups. This automatic looping will begin at the global line type value (i.e., par(‚Äúlty‚Äù)) and recycle as necessary.\n\n\n\n\ncol\n\n\nplotting color. Character, integer, or vector of length equal to the number of categories in the by variable. See col. Note that the default behaviour in plot2 is to vary group colors along any variables declared in the by argument. Thus, specifying colors manually should not be necessary unless users wish to override the automatic colors produced by this grouping process. Typically, this would only be done if grouping features are deferred to some other graphical parameter (i.e., passing the \"by\" keyword to one of pch, lty, or bg; see below.)\n\n\n\n\nbg\n\n\nbackground fill color for the open plot symbols 21:25 (see points.default), as well as ribbon and area plot types. For the latter group‚Äîincluding filled density plots‚Äîan automatic alpha transparency adjustment will be applied (see the ribbon_alpha argument further below). Users can also supply a special bg = ‚Äúby‚Äù convenience argument, in which case the background fill will inherit the automatic group coloring intended for the col argument. Note that this grouped inheritance will persist even if the col defaults are themselves overridden. For example, plot2(y ~ x | z, data = fakedata, pch = 22, col = ‚Äúblue‚Äù, bg = ‚Äúby‚Äù) will yield filled squares with a blue border.\n\n\n\n\nfill\n\n\nalias for bg. If non-NULL values for both bg and fill are provided, then the latter will be ignored in favour of the former.\n\n\n\n\ncex\n\n\ncharacter expansion. A numerical vector (can be a single value) giving the amount by which plotting characters and symbols should be scaled relative to the default. Note that NULL is equivalent to 1.0, while NA renders the characters invisible.\n\n\n\n\npar_restore\n\n\na logical value indicating whether the par settings prior to calling plot2 should be restored on exit. Defaults to FALSE, which makes it possible to add elements to the plot after it has been drawn. However, note the the outer margins of the graphics device may have been altered to make space for the plot2 legend. Users can opt out of this persistent behaviour by setting to TRUE instead. (Another option would be calling dev.off() to reset all par settings to their defaults.)\n\n\n\n\nymin, ymax\n\n\nminimum and maximum coordinates of interval plot types. Only used when the type argument is one of \"pointrange\", \"errorbar\", or \"ribbon\".\n\n\n\n\nribbon_alpha\n\n\nnumeric factor modifying the opacity alpha of any ribbon shading; typically in [0, 1]. Default value is 0.2. Only used when type = ‚Äúribbon‚Äù, or when the bg fill argument is specified in a density plot (since filled density plots are converted to ribbon plots internally).\n\n\n\n\nadd\n\n\nlogical. If TRUE, then elements are added to the current plot rather than drawing a new plot window. Note that the automatic legend for the added elements will be turned off.\n\n\n\n\nformula\n\n\na formula that optionally includes grouping variable(s) after a vertical bar, e.g.¬†y ~ x | z. One-sided formulae are also permitted, e.g.¬†~ y | z. Note that the formula and x arguments should not be specified in the same call.\n\n\n\n\nsubset, na.action, drop.unused.levels\n\n\narguments passed to model.frame when extracting the data from formula and data.\n\n\n\n\n\n\n\nlibrary(plot2)\n\n\n# save graphics parameters to restore them later\nop = par()\n\n\n# plot2 should be a drop-in replacement for (most) regular plot calls. For\n# example:\n\npar(mfrow = c(1, 2))\nplot(0:10, main = \"plot\")\nplot2(0:10, main = \"plot2\")\n\n\n\n\n\n\n\n# restore graphics parameters\npar(op)  \n\n# Unlike vanilla plot, however, plot2 allows you to characterize groups \n# (using either the `by` argument or equivalent `|` formula syntax).\n\naq = transform(\n  airquality,\n  Month = factor(Month, labels = month.abb[unique(Month)])\n)\n\nwith(aq, plot2(Day, Temp, by = Month)) ## atomic method\nplot2(Temp ~ Day | Month, data = aq)   ## formula method\n\n\n\n\n\n\n\n# Notice that we also get an automatic legend.\n\n# Use standard base plotting arguments to adjust features of your plot.\n# For example, change `pch` (plot character) to get filled points.\n\nplot2(\n  Temp ~ Day | Month,\n  data = aq,\n  pch = 16\n)\n\n\n\n\n\n\n\n# Converting to a grouped line plot is a simple matter of adjusting the\n# `type` argument.\n\nplot2(\n  Temp ~ Day | Month,\n  data = aq,\n  type = \"l\"\n)\n\n\n\n\n\n\n\n# Similarly for other plot types, including some additional ones provided\n# directly by plot2, e.g. density plots or internal plots (ribbons, \n# pointranges, etc.)\n\nplot2(\n  ~ Temp | Month,\n  data = aq,\n  type = \"density\",\n  fill = \"by\"\n)\n\n\n\n\n\n\n\n# Facet plots are supported too. Facets can be drawn on their own...\n\nplot2(\n  Temp ~ Day,\n  facet = ~ Month, \n  data = aq,\n  type = \"area\",\n  main = \"Temperatures by month\"\n)\n\n\n\n\n\n\n\n# ... or combined/contrasted with the by (colour) grouping.\n\naq = transform(aq, Summer = Month %in% c(\"Jun\", \"Jul\", \"Aug\"))\nplot2(\n  Temp ~ Day | Summer,\n  facet = ~ Month, \n  data = aq,\n  type = \"area\",\n  palette = \"dark2\",\n  main = \"Temperatures by month and season\"\n)\n\n\n\n\n\n\n\n# Users can override the default square window arrangement by passing `nrow`\n# or `ncol` to the helper facet.args argument. Note that we can also reduce\n# axis label repetition across facets by turning the plot frame off.\n\nplot2(\n  Temp ~ Day | Summer,\n  facet = ~ Month, facet.args = list(nrow = 1),\n  data = aq,\n  type = \"area\",\n  palette = \"dark2\",\n  frame = FALSE,\n  main = \"Temperatures by month and season\"\n)\n\n\n\n\n\n\n\n# Use a two-sided formula to arrange the facet windows in a fixed grid.\n# LHS -&gt; facet rows; RHS -&gt; facet columns\n\naq$hot = ifelse(aq$Temp&gt;=75, \"hot\", \"cold\")\naq$windy = ifelse(aq$Wind&gt;=15, \"windy\", \"calm\")\nplot2(\n Temp ~ Day,\n facet = windy ~ hot,\n data = aq\n)\n\n\n\n\n\n\n\n# The (automatic) legend position and look can be customized using\n# appropriate arguments. Note the trailing \"!\" in the `legend` position\n# argument below. This tells `plot2` to place the legend _outside_ the plot\n# area.\n\nplot2(\n  Temp ~ Day | Month,\n  data = aq,\n  type = \"l\",\n  legend = legend(\"bottom!\", title = \"Month of the year\", bty = \"o\")\n)\n\n\n\n\n\n\n\n# The default group colours are inherited from either the \"R4\" or \"Viridis\"\n# palettes, depending on the number of groups. However, all palettes listed\n# by `palette.pals()` and `hcl.pals()` are supported as convenience strings,\n# or users can supply a valid palette-generating function for finer control\n# over transparency etc.\n\nplot2(\n  Temp ~ Day | Month,\n  data = aq,\n  type = \"l\",\n  palette = \"tableau\"\n)\n\n\n\n\n\n\n\n# It's possible to further customize the look of you plots using familiar\n# arguments and base plotting theme settings (e.g., via `par`).\n\npar(family = \"HersheySans\", las = 1)\nplot2(\n  Temp ~ Day | Month,\n  data = aq,\n  type = \"b\", pch = 16,\n  palette = palette.colors(palette = \"tableau\", alpha = 0.5),\n  main = \"Daily temperatures by month\",\n  frame = FALSE, grid = TRUE\n)\n\n\n\n\n\n\n\npar(family = \"\") # revert global font change from above",
    "crumbs": [
      "Reference",
      "plot2"
    ]
  },
  {
    "objectID": "man/plot2.html#lightweight-extension-of-the-base-r-plotting-function",
    "href": "man/plot2.html#lightweight-extension-of-the-base-r-plotting-function",
    "title": "plot2",
    "section": "",
    "text": "Extends base R‚Äôs graphics system, particularly as it applies to scatter and line plots with grouped data. For example, plot2 makes it easy to plot different categories of a dataset in a single function call and highlight these categories (groups) using modern colour palettes. Coincident with this grouping support, plot2 also produces automatic legends with scope for further customization. While the package also offers several other enhancements, it tries as far as possible to be a drop-in replacement for the equivalent base plot function. Users should generally be able to swap a valid plot call with plot2 without any changes to the output.\n\n\n\nplot2(x, ...)\n\n## Default S3 method:\nplot2(\n  x,\n  y = NULL,\n  by = NULL,\n  facet = NULL,\n  facet.args = NULL,\n  data = NULL,\n  type = \"p\",\n  xlim = NULL,\n  ylim = NULL,\n  log = \"\",\n  main = NULL,\n  sub = NULL,\n  xlab = NULL,\n  ylab = NULL,\n  ann = par(\"ann\"),\n  axes = TRUE,\n  frame.plot = axes,\n  asp = NA,\n  grid = NULL,\n  palette = NULL,\n  legend = NULL,\n  pch = NULL,\n  lty = NULL,\n  col = NULL,\n  bg = NULL,\n  fill = NULL,\n  cex = 1,\n  par_restore = FALSE,\n  ymin = NULL,\n  ymax = NULL,\n  ribbon_alpha = 0.2,\n  add = FALSE,\n  ...\n)\n\n## S3 method for class 'formula'\nplot2(\n  x = NULL,\n  data = parent.frame(),\n  facet = NULL,\n  facet.args = NULL,\n  type = \"p\",\n  xlim = NULL,\n  ylim = NULL,\n  main = NULL,\n  sub = NULL,\n  xlab = NULL,\n  ylab = NULL,\n  ann = par(\"ann\"),\n  axes = TRUE,\n  frame.plot = axes,\n  asp = NA,\n  grid = NULL,\n  pch = NULL,\n  col = NULL,\n  lty = NULL,\n  par_restore = FALSE,\n  formula = NULL,\n  subset = NULL,\n  na.action = NULL,\n  drop.unused.levels = TRUE,\n  ...\n)\n\n## S3 method for class 'density'\nplot2(\n  x = NULL,\n  by = NULL,\n  facet = NULL,\n  facet.args = NULL,\n  type = c(\"l\", \"area\"),\n  xlim = NULL,\n  ylim = NULL,\n  main = NULL,\n  sub = NULL,\n  xlab = NULL,\n  ylab = NULL,\n  ann = par(\"ann\"),\n  axes = TRUE,\n  frame.plot = axes,\n  asp = NA,\n  grid = NULL,\n  pch = NULL,\n  col = NULL,\n  lty = NULL,\n  bg = NULL,\n  fill = NULL,\n  par_restore = FALSE,\n  ...\n)\n\n\n\n\n\n\n\nx, y\n\n\nthe x and y arguments provide the x and y coordinates for the plot. Any reasonable way of defining the coordinates is acceptable; most likely the names of existing vectors or columns of data frames. See the ‚ÄòExamples‚Äô section below, or the function xy.coords for details. If supplied separately, x and y must be of the same length.\n\n\n\n\n‚Ä¶\n\n\nother graphical parameters. See par or the \"Details\" section of plot.\n\n\n\n\nby\n\n\ngrouping variable(s). By default, groups will be represented through colouring of the plot elements. However, this can be turned off and other plot parameters (e.g., line types) can also take on grouping behaviour via the special \"by\" keyword. See Examples.\n\n\n\n\nfacet\n\n\nthe faceting variable(s) that you want arrange separate plot windows by. Can be specified in various ways:\n\n\nIn \"atomic\" form, e.g.¬†facet = fvar. To facet by multiple variables in atomic form, simply interact them, e.g. interaction(fvar1, fvar2) or factor(fvar1):factor(fvar2).\n\n\nAs a one-sided formula, e.g.¬†facet = ~fvar. Multiple variables can be specified in the formula RHS, e.g.¬†~fvar1 + fvar2 or ~fvar1:fvar2. Note that these multi-variable cases are all treated equivalently and converted to interaction(fvar1, fvar2, ‚Ä¶) internally. (No distinction is made between different types of binary operators, for example, and so f1+f2 is treated the same as f1:f2, is treated the same as f1*f2, etc.)\n\n\nAs a two-side formula, e.g.¬†facet = fvar1 ~ fvar2. In this case, the facet windows are arranged in a fixed grid layout, with the formula LHS defining the facet rows and the RHS defining the facet columns. At present only single variables on each side of the formula are well supported. (We don‚Äôt recommend trying to use multiple variables on either the LHS or RHS of the two-sided formula case.)\n\n\nAs a special ‚Äúby‚Äù convenience keyword, in which case facets will match the grouping variable(s) passed to by above.\n\n\n\n\n\n\nfacet.args\n\n\nan optional list of arguments for controlling faceting behaviour. (Ignored if facet is NULL.) Supported arguments are as follows:\n\n\nnrow, ncol for overriding the default \"square\" facet window arrangement. Only one of these should be specified, but nrow will take precedence if both are specified together. Ignored if a two-sided formula is passed to the main facet argument, since the layout is arranged in a fixed grid.\n\n\nfmar a vector of form c(b,l,t,r) for controlling the base margin between facets in terms of lines. Defaults to the value of par2(‚Äúfmar‚Äù), which should be c(1,1,1,1), i.e.¬†a single line of padding around each individual facet, assuming it hasn‚Äôt been overridden by the user as part their global par2 settings. Note some automatic adjustments are made for certain layouts, and depending on whether the plot is framed or not, to reduce excess whitespace. See par2 for more details.\n\n\ncex, font, col, bg, border for adjusting the facet title text and background. Default values for these arguments are inherited from par2 (where they take a \"facet.\" prefix, e.g. par2(‚Äúfacet.cex‚Äù)). The latter function can also be used to set these features globally for all plot2 plots.\n\n\n\n\n\n\ndata\n\n\na data.frame (or list) from which the variables in formula should be taken. A matrix is converted to a data frame.\n\n\n\n\ntype\n\n\ncharacter string giving the type of plot desired. Options are:\n\n\nThe same set of 1-character values supported by plot: \"p\" for points, \"l\" for lines, \"b\" for both points and lines, \"c\" for empty points joined by lines, \"o\" for overplotted points and lines, \"s\" and \"S\" for stair steps and \"h\" for histogram-like vertical lines. \"n\" does not produce any points or lines.\n\n\nAdditional plot2 types: \"density\" for densities, \"pointrange\" or \"errorbar\" for segement intervals, and \"ribbon\" or \"area\" for polygon intervals (where area plots are a special case of ribbon plots with ymin set to 0 and ymax set to y; see below).\n\n\n\n\n\n\nxlim\n\n\nthe x limits (x1, x2) of the plot. Note that x1 &gt; x2 is allowed and leads to a ‚Äòreversed axis‚Äô. The default value, NULL, indicates that the range of the finite values to be plotted should be used.\n\n\n\n\nylim\n\n\nthe y limits of the plot.\n\n\n\n\nlog\n\n\na character string which contains \"x\" if the x axis is to be logarithmic, \"y\" if the y axis is to be logarithmic and \"xy\" or \"yx\" if both axes are to be logarithmic.\n\n\n\n\nmain\n\n\na main title for the plot, see also title.\n\n\n\n\nsub\n\n\na subtitle for the plot.\n\n\n\n\nxlab\n\n\na label for the x axis, defaults to a description of x.\n\n\n\n\nylab\n\n\na label for the y axis, defaults to a description of y.\n\n\n\n\nann\n\n\na logical value indicating whether the default annotation (title and x and y axis labels) should appear on the plot.\n\n\n\n\naxes\n\n\na logical value indicating whether both axes should be drawn on the plot. Use graphical parameter \"xaxt\" or \"yaxt\" to suppress just one of the axes.\n\n\n\n\nframe.plot\n\n\na logical indicating whether a box should be drawn around the plot. Can also use frame as an acceptable argument alias.\n\n\n\n\nasp\n\n\nthe y/xy/x aspect ratio, see plot.window.\n\n\n\n\ngrid\n\n\nargument for plotting a background panel grid, one of either:\n\n\na logical (i.e., TRUE to draw the grid), or\n\n\na panel grid plotting function like grid(). Note that this argument replaces the panel.first and panel.last arguments from base plot() and tries to make the process more seamless with better default behaviour. Default is not to draw a grid.\n\n\n\n\n\n\npalette\n\n\none of the following options:\n\n\nNULL (default), in which case the palette will be determined by the the user‚Äôs default graphics palette, e.g.¬†\"R4\". See ?palette(). Note that some internal checking is done to make sure that resulting colours match the number of groups. For larger group numbers, the \"viridis\" palette will be used instead.\n\n\nA convenience string corresponding to one of the many palettes listed by either palette.pals() or hcl.pals(). Note that the string can be case-insensitive (e.g., \"Okabe-Ito\" and \"okabe-ito\" are both valid).\n\n\nA palette-generating function. This can be \"bare\" (e.g., palette.colors) or \"closed\" with a set of named arguments (e.g., palette.colors(palette = ‚ÄúOkabe-Ito‚Äù, alpha = 0.5)). Note that any unnamed arguments will be ignored and the key n argument, denoting the number of colours, will automatically be spliced in as the number of groups.\n\n\n\n\n\n\nlegend\n\n\none of the following options:\n\n\nNULL (default), in which case the legend will be determined by the grouping variable. If there is no group variable (i.e., by is NULL) then no legend is drawn. If a grouping variable is detected, then an automatic legend is drawn to the outer right of the plotting area. Note that the legend title and categories will automatically be inferred from the by argument and underlying data.\n\n\nA convenience string indicating the legend position. The string should correspond to one of the position keywords supported by the base legend function, e.g.¬†\"right\", \"topleft\", \"bottom\", etc. In addition, plot2 supports adding a trailing exclamation point to these keywords, e.g. \"right!\", \"topleft!\", or \"bottom!\". This will place the legend outside the plotting area and adjust the margins of the plot accordingly. Finally, users can also turn off any legend printing by specifying \"none\".\n\n\nLogical value, where TRUE corresponds to the default case above (same effect as specifying NULL) and FALSE turns the legend off (same effect as specifying \"none\").\n\n\nA list or, equivalently, a dedicated legend() function with supported legend arguments, e.g.¬†\"bty\", \"horiz\", and so forth.\n\n\n\n\n\n\npch\n\n\nplotting \"character\", i.e., symbol to use. Character, integer, or vector of length equal to the number of categories in the by variable. See pch. In addition, users can supply a special pch = ‚Äúby‚Äù convenience argument, in which case the characters will automatically loop over the number groups. This automatic looping will begin at the global character value (i.e., par(‚Äúpch‚Äù)) and recycle as necessary.\n\n\n\n\nlty\n\n\nline type. Character, integer, or vector of length equal to the number of categories in the by variable. See lty. In addition, users can supply a special lty = ‚Äúby‚Äù convenience argument, in which case the line type will automatically loop over the number groups. This automatic looping will begin at the global line type value (i.e., par(‚Äúlty‚Äù)) and recycle as necessary.\n\n\n\n\ncol\n\n\nplotting color. Character, integer, or vector of length equal to the number of categories in the by variable. See col. Note that the default behaviour in plot2 is to vary group colors along any variables declared in the by argument. Thus, specifying colors manually should not be necessary unless users wish to override the automatic colors produced by this grouping process. Typically, this would only be done if grouping features are deferred to some other graphical parameter (i.e., passing the \"by\" keyword to one of pch, lty, or bg; see below.)\n\n\n\n\nbg\n\n\nbackground fill color for the open plot symbols 21:25 (see points.default), as well as ribbon and area plot types. For the latter group‚Äîincluding filled density plots‚Äîan automatic alpha transparency adjustment will be applied (see the ribbon_alpha argument further below). Users can also supply a special bg = ‚Äúby‚Äù convenience argument, in which case the background fill will inherit the automatic group coloring intended for the col argument. Note that this grouped inheritance will persist even if the col defaults are themselves overridden. For example, plot2(y ~ x | z, data = fakedata, pch = 22, col = ‚Äúblue‚Äù, bg = ‚Äúby‚Äù) will yield filled squares with a blue border.\n\n\n\n\nfill\n\n\nalias for bg. If non-NULL values for both bg and fill are provided, then the latter will be ignored in favour of the former.\n\n\n\n\ncex\n\n\ncharacter expansion. A numerical vector (can be a single value) giving the amount by which plotting characters and symbols should be scaled relative to the default. Note that NULL is equivalent to 1.0, while NA renders the characters invisible.\n\n\n\n\npar_restore\n\n\na logical value indicating whether the par settings prior to calling plot2 should be restored on exit. Defaults to FALSE, which makes it possible to add elements to the plot after it has been drawn. However, note the the outer margins of the graphics device may have been altered to make space for the plot2 legend. Users can opt out of this persistent behaviour by setting to TRUE instead. (Another option would be calling dev.off() to reset all par settings to their defaults.)\n\n\n\n\nymin, ymax\n\n\nminimum and maximum coordinates of interval plot types. Only used when the type argument is one of \"pointrange\", \"errorbar\", or \"ribbon\".\n\n\n\n\nribbon_alpha\n\n\nnumeric factor modifying the opacity alpha of any ribbon shading; typically in [0, 1]. Default value is 0.2. Only used when type = ‚Äúribbon‚Äù, or when the bg fill argument is specified in a density plot (since filled density plots are converted to ribbon plots internally).\n\n\n\n\nadd\n\n\nlogical. If TRUE, then elements are added to the current plot rather than drawing a new plot window. Note that the automatic legend for the added elements will be turned off.\n\n\n\n\nformula\n\n\na formula that optionally includes grouping variable(s) after a vertical bar, e.g.¬†y ~ x | z. One-sided formulae are also permitted, e.g.¬†~ y | z. Note that the formula and x arguments should not be specified in the same call.\n\n\n\n\nsubset, na.action, drop.unused.levels\n\n\narguments passed to model.frame when extracting the data from formula and data.\n\n\n\n\n\n\n\nlibrary(plot2)\n\n\n# save graphics parameters to restore them later\nop = par()\n\n\n# plot2 should be a drop-in replacement for (most) regular plot calls. For\n# example:\n\npar(mfrow = c(1, 2))\nplot(0:10, main = \"plot\")\nplot2(0:10, main = \"plot2\")\n\n\n\n\n\n\n\n# restore graphics parameters\npar(op)  \n\n# Unlike vanilla plot, however, plot2 allows you to characterize groups \n# (using either the `by` argument or equivalent `|` formula syntax).\n\naq = transform(\n  airquality,\n  Month = factor(Month, labels = month.abb[unique(Month)])\n)\n\nwith(aq, plot2(Day, Temp, by = Month)) ## atomic method\nplot2(Temp ~ Day | Month, data = aq)   ## formula method\n\n\n\n\n\n\n\n# Notice that we also get an automatic legend.\n\n# Use standard base plotting arguments to adjust features of your plot.\n# For example, change `pch` (plot character) to get filled points.\n\nplot2(\n  Temp ~ Day | Month,\n  data = aq,\n  pch = 16\n)\n\n\n\n\n\n\n\n# Converting to a grouped line plot is a simple matter of adjusting the\n# `type` argument.\n\nplot2(\n  Temp ~ Day | Month,\n  data = aq,\n  type = \"l\"\n)\n\n\n\n\n\n\n\n# Similarly for other plot types, including some additional ones provided\n# directly by plot2, e.g. density plots or internal plots (ribbons, \n# pointranges, etc.)\n\nplot2(\n  ~ Temp | Month,\n  data = aq,\n  type = \"density\",\n  fill = \"by\"\n)\n\n\n\n\n\n\n\n# Facet plots are supported too. Facets can be drawn on their own...\n\nplot2(\n  Temp ~ Day,\n  facet = ~ Month, \n  data = aq,\n  type = \"area\",\n  main = \"Temperatures by month\"\n)\n\n\n\n\n\n\n\n# ... or combined/contrasted with the by (colour) grouping.\n\naq = transform(aq, Summer = Month %in% c(\"Jun\", \"Jul\", \"Aug\"))\nplot2(\n  Temp ~ Day | Summer,\n  facet = ~ Month, \n  data = aq,\n  type = \"area\",\n  palette = \"dark2\",\n  main = \"Temperatures by month and season\"\n)\n\n\n\n\n\n\n\n# Users can override the default square window arrangement by passing `nrow`\n# or `ncol` to the helper facet.args argument. Note that we can also reduce\n# axis label repetition across facets by turning the plot frame off.\n\nplot2(\n  Temp ~ Day | Summer,\n  facet = ~ Month, facet.args = list(nrow = 1),\n  data = aq,\n  type = \"area\",\n  palette = \"dark2\",\n  frame = FALSE,\n  main = \"Temperatures by month and season\"\n)\n\n\n\n\n\n\n\n# Use a two-sided formula to arrange the facet windows in a fixed grid.\n# LHS -&gt; facet rows; RHS -&gt; facet columns\n\naq$hot = ifelse(aq$Temp&gt;=75, \"hot\", \"cold\")\naq$windy = ifelse(aq$Wind&gt;=15, \"windy\", \"calm\")\nplot2(\n Temp ~ Day,\n facet = windy ~ hot,\n data = aq\n)\n\n\n\n\n\n\n\n# The (automatic) legend position and look can be customized using\n# appropriate arguments. Note the trailing \"!\" in the `legend` position\n# argument below. This tells `plot2` to place the legend _outside_ the plot\n# area.\n\nplot2(\n  Temp ~ Day | Month,\n  data = aq,\n  type = \"l\",\n  legend = legend(\"bottom!\", title = \"Month of the year\", bty = \"o\")\n)\n\n\n\n\n\n\n\n# The default group colours are inherited from either the \"R4\" or \"Viridis\"\n# palettes, depending on the number of groups. However, all palettes listed\n# by `palette.pals()` and `hcl.pals()` are supported as convenience strings,\n# or users can supply a valid palette-generating function for finer control\n# over transparency etc.\n\nplot2(\n  Temp ~ Day | Month,\n  data = aq,\n  type = \"l\",\n  palette = \"tableau\"\n)\n\n\n\n\n\n\n\n# It's possible to further customize the look of you plots using familiar\n# arguments and base plotting theme settings (e.g., via `par`).\n\npar(family = \"HersheySans\", las = 1)\nplot2(\n  Temp ~ Day | Month,\n  data = aq,\n  type = \"b\", pch = 16,\n  palette = palette.colors(palette = \"tableau\", alpha = 0.5),\n  main = \"Daily temperatures by month\",\n  frame = FALSE, grid = TRUE\n)\n\n\n\n\n\n\n\npar(family = \"\") # revert global font change from above",
    "crumbs": [
      "Reference",
      "plot2"
    ]
  },
  {
    "objectID": "CITATION.html",
    "href": "CITATION.html",
    "title": "Citation",
    "section": "",
    "text": "Citation\nTo cite package ‚Äòplot2‚Äô in publications use:\n\n  McDermott G, Arel-Bundock V, Zeileis A (????). _plot2: Lightweight\n  extension of base R plot_. R package version 0.0.4,\n  http://grantmcdermott.com/plot2/,\n  &lt;https://grantmcdermott.com/plot2/&gt;.\n\nA BibTeX entry for LaTeX users is\n\n  @Manual{,\n    title = {plot2: Lightweight extension of base R plot},\n    author = {Grant McDermott and Vincent Arel-Bundock and Achim Zeileis},\n    note = {R package version 0.0.4, \nhttp://grantmcdermott.com/plot2/},\n    url = {https://grantmcdermott.com/plot2/},\n  }",
    "crumbs": [
      "Citation"
    ]
  }
]